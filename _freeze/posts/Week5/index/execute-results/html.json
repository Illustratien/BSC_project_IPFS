{
  "hash": "cc16cd2439465158124734069b8d90b0",
  "result": {
    "markdown": "---\ntitle: \"Week5: pattern matching in dataframe\"\nauthor: \"Tien-Cheng\"\ncategories: [R-intermediate]\n\ntoc-location: right\nnumber-sections: true\nwebsite: \n  sidebar:\n    search: true\nformat:\n  html: \n    grid:\n      sidebar-width: 300px\n      body-width: 900px\n      margin-width: 300px\n      gutter-width: 1.5rem\n\nreference-location: margin\n---\n\n\n\n\nWelcome to the fifth course! You will learn more about `dataframe` wrangling:\n\n::: callout-note\n# Learning goals\n\n1.  data frame wrangling with `dplyr` and `tidyr`\n:::\n\n## Today's discussion\n\nIs it possible to access the elements at different columns and rows?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  x1=1:3,\n  x2=letters[1:3],\n  x3=c(\"2a\",\"2b\",\"2c\")\n)\n# or condition separate by |\ndf$x1==2|df$x3==\"2c\"\n\ndf %>% filter(x1==2|x3==\"2c\")\ndf %>% with(.,x1==2|x3==\"2c\")\n\n# when not specifying the comma, it will be treated like column\ndf %>% with(.,.[x1==2|x3==\"2c\"])\n# specify the rows\ndf %>% with(.,.[x1==2|x3==\"2c\",])\n```\n:::\n\n\n## more mutate examples\n\nLast week's practice.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- expand.grid(x=letters[1:4],\n                  y=1:2)%>%\n  # combine columns x and y \n  mutate(z=interaction(x,y))\nrownames(df) <- LETTERS[1:nrow(df)]\n```\n:::\n\n\n### replace column\n\n#### replace one column based on single condition\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% mutate(k=ifelse(x==\"a\",\"A\",\"B\"))\ndf %>% mutate(k=ifelse(y==1,\"A\",\"B\"))\ndf %>% mutate(k=case_when(x==\"a\"~\"A\",\n                          TRUE~\"B\"))\n```\n:::\n\n\n::: callout-warning\n## practice\n\nMatching multiple conditions\n\nadd column `k` to `df`,\nwhen the condition x equals \"a\" `and` y equals 1.\nif `TRUE` return 'A', else return 'B'.\n\n:::\n\n#### replace one column based on multiple conditions\n\nin `case_when` syntax, `TRUE` before `~` stands for the `else` conditions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% mutate(k=case_when(x==\"a\"~\"A\",\n                          x==\"b\"~\"B\",\n                          TRUE~\"C\"))\n```\n:::\n\n\n#### Look up table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlook_table <- data.frame(x=letters,\n                         X=LETTERS)\ndf %>% merge(look_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y   z X\n1 a 1 a.1 A\n2 a 2 a.2 A\n3 b 1 b.1 B\n4 b 2 b.2 B\n5 c 1 c.1 C\n6 c 2 c.2 C\n7 d 1 d.1 D\n8 d 2 d.2 D\n```\n:::\n:::\n\n\n::: callout-warning\n## practice\n\n`merge` is not actually replace the original column.\n\nWrite a function to replace `letters` with `LETTERS`. The input is a vector of lower case vector `vec <- c(\"c\",\"a\",\"b\",\"d\")`, output will be the matched upper case vector `c(\"C\",\"A\",\"B\",\"D\")`.\n\nHint: check function `match()` !!Before you start to write the code, please first write down the possible steps in text.!!\n:::\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}