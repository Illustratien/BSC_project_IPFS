{
  "hash": "e63ef84bde965cc4ee41b9b4d968e115",
  "result": {
    "markdown": "---\ntitle: \"Week1: R studio and vector\"\nauthor: \"Tien-Cheng\"\ncategories: [R-project,data type,vector]\nimage: \"Assign.png\"\ntoc-location: right\nwebsite: \n  sidebar:\n    search: true\nnumber-sections: true\nformat:\n  html: \n    html-math-method: katex\n---\n\n\n\n\n\n\nWelcome to the first course! During the following 2 hrs, you will learn data type of [`vectors`](https://towardsdatascience.com/learning-r-data-types-e698d23f8179#:~:text=First%2C%20R%20doesn%27t%20have,in%20R%20language%20is%20vector.), `function` and `%>%`.\n\n::: callout-note\n1.  set up working directory and name space\n2.  vector and 4 basic data types: (\"chr\",\"numeric\",\"logical\",\"Date\")\n3.  functions, documentation and data type check\n4.  meaning of `%>%` and `.`\n5.  indexing with pattern matching\n:::\n\n## Set up your working directory\n\n### preparation\n\n1.  Please make sure you have installed [`R & Rstudio`](https://posit.co/download/rstudio-desktop/).\n\n2.  File -\\> New Project -\\> `Wheat_BSC_project.Rproj`\n\n![](Rproj.png){width=\"800,height\"}\\\n### your first R script\n\nPress `Ctrl+ Shift +N`to open new script.Save it as `Week1_practice.R` Copy code from this website to your script and press `run`.\n\n### Concept of datatype & name space:\n\n1.  Don't overwrite `variable names` in name space (what already exists in system).\n\n    -   eg., `var`,`mean`,`aov`, etc. \n    \n::: callout-warning\navoid *something that will show in the drop down menu of auto-completion.*\n\n![Name space](dropdown.PNG){width=\"800,height\"}\\\n:::\n\n2.  Separate long `variable names` with `_`.\n\n    -   eg., `thermal_time`,`mean_yield`, etc.\n\n3.  Don't start `variable names` with number.\n\n|     |        Bad        |       Better       |\n|:---:|:-----------------:|:------------------:|\n|     |     `3years`      |   `three_years`    |\n|     | `1225measurement` | `measurement_1225` |\n|     |   `13genotypes`   |   `genotypes_13`   |\n\n![Structure of a vector](vector.png){width=\"800,height\"}\n\nVariable = variable names + object ![Syntax of assigning names to variable](Assign.png){width=\"800,height\"}\n\n## Data type is everything\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable\n# assignment str\"v\" to name \"variable\"\n## \"\" and unquote str and variable \nvariable <- \"v\"\nVariable <- 1\n\nvariable +1\nVariable +1 \n```\n:::\n\n\n### Always check your data type first!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str??\nstr\n?str\nstr(variable)\nstr(Variable)\n# data type coersion\nstr(NA)\nstr(c(NA,1))\nstr(c(NA,\"a\"))\nstr(c(NA,TRUE))\nstr(c(1,\"a\"))\n```\n:::\n\n\n### Date\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.Date(\"2023-04-17\")\nas.Date(\"2023-04-17\",format=\"%Y-%m-%d\")\n# is ther any error?\nas.Date(\"20230417\")\nas.Date(\"17042023\")\n# additive properties of Date \nas.Date(\"2023-04-17\")-7\nas.Date(\"2023-04-17\")+2\n```\n:::\n\n\n## Function: something ends with `()`\n\n![How function works?](function.png){width=\"800,height\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# example: fun(object)\nc(1,2,3)\nmean(c(1,2,3))\nstr(TRUE)\nseq(1,5,1)\n```\n:::\n\n\n::: callout-challenge\nSince type `Date` is additive, how to create successive `date` vector of length 5? Vector `date` start with \"2023-04-17\"\n\nCould you do the average of this vector?\n:::\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-04-17\" \"2023-04-18\" \"2023-04-19\" \"2023-04-20\" \"2023-04-21\"\n```\n:::\n:::\n\n\n### separate individual function from nested functions with `%>%`\n\nPipe (`%>%`) is available in r-package either `dplyr` or `magrittr`.\n\nPlease use `%>%` to avoid embedded functions.\n\n`.`stands for the result from the left side of the pipe.\n\nFor long line code, press `enter` after each `%>%`.\n\nSelect all the codes by `ctrl A`.\n\nIndent the selected codes by `ctrl I`.\n\nConcepts of using pipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# syntax of using pipe\n\nfun1(object)\n\nobject %>% fun1(.)\nobject %>% fun1()\nobject %>% fun1() %>% .\nobject %>% fun1(.) %>% .\n\n#embedded functions\nfun2(fun1(object))\n# pipe\nobject %>% \n  fun1() %>% \n  fun2()\n```\n:::\n\n\nExamples of using pipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many ways of creating a sequence?\nc(1,2,3)\nseq(1,3,1)\n\n# embedded function : fun2(fun1())\nlength(c(1,2,3))\n# use pipe, \".\" is the result of previous step\nc(1,2,3) %>% length(.)\n\n# replicate element as vector\nrep(1,3)\n# remove duplicates\nrep(1,3) %>% unique()\n# cumulative sum \nrep(1,3) %>% cumsum()\n\n# is there any difference?\npaste(c(\"a\",\"1\"),collapse = \"\")\npaste0(c(\"a\",\"1\"))\npaste0(\"a\",\"1\")\n```\n:::\n\n\n::: callout-challenge\nUse `str()` to check the data type of above line.\n\nYou have two vectors, `c(\"a\",\"b\")` and `c(\"1\",\"2\")`\n\nHow to use `paste` and `rep`to create sequence of `char` vector shown below?\n\nCheck the arguments of `rep` to get more hints. e.g.,\n\n`rep(c(\"a\",\"b\"),each=2)`\n\n`rep(c(\"a\",\"b\"),times=2)`\n:::\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a1\" \"a2\" \"b1\" \"b2\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a1\" \"b1\" \"a2\" \"b2\"\n```\n:::\n:::\n\n\n### write your first function\n\nformat: `function_name`(`argument1`, `argument2`) {`code`} example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplusone <- function(x){\n  x+1\n}\n# is function data type sensitive?\nplusone(variable)\nplusone(Variable) \n```\n:::\n\n\nfunction with good documentation example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name  <-function(input){\n  # input: datatype, length, meaning.\n  # output: datatype, length, meaning.\n  # action1: intermediate_variable <- input %>% fun1()\n  # action2: output <-intermediate_variable%>% fun2()\n  ...\n  return(output)\n}\n```\n:::\n\n\n::: callout-challenge\nwrite a function with documentation: input `vec` is a numeric vector with length 3, return `str` of average value of `vec` Â± standard deviation of `vec`.\n\nVisualize the step in your function by first writing your the possible steps in text!\n:::\n\n## r packages : collection of functions\n\nCheck this great package [tidyverse](https://dplyr.tidyverse.org/)!\n\n-   Note that windows user may need to first download the [Rtools](https://cran.r-project.org/bin/windows/Rtools/) that match your R version.\n\nYou can check your R version by typing `version()` in your R console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(tidyrverse)\ninstall.packages(\"tidyrverse\")\nlibrary(dplyr)\n```\n:::\n\n\n## Pattern matching: logical vector and its position\n\n![Logical vector](logical.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check if pattern exist in vector\n3%in%c(1,3) \n2%in%c(1,3) \n\n1==2 \n!1==2 \n1!=2 \nc(1,3)==2\n\nwhich(c(1,3)==3) \n\n# what will be the difference?\norder(c(3,1,2)) \nc(3,1,2) %>% .[order(.)]\n\n# what will be the data type? check with str()\nc(1,2,NA) %>% is.na() \nc(1,2,NA) %>% is.na() %>% which() \nc(1,2,NA) %>% is.na() %>% !.\nc(1,2,NA) %>% !is.na() \n!is.na(c(1,2,NA))\n\n# check if data type match\narg <- \"\"\nis.character(arg)\nif(is.character(arg)){\n  print(\"character\")\n}\n\nif(is.character(arg)){\n  print(\"character\")\n}else{\n  error(\"type other than character\")\n}\n\nif(is.character(arg)){\n  warning(\"wrong\")\n}\n\nif(is.character(arg)){\n  stop(\"wrong\")\n}\n```\n:::\n\n\n::: callout-challenge\nInside your `plusone` function, please check first whether input `x` is numeric, then proceed the process.\n\nif not, return with message \"wrong input type\" using `stop()`\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}