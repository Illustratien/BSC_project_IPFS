{
  "hash": "a12839c7a1ee6a454b2d7c7e4a492357",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Protocol\"\ndate: \"2023-06-20\"\n---\n\n\n\n\n## Goal :\n\n> -   Treatment to compare: early and late\\\n> -   Other info (total nitrogen 176 kg/ha, split application of heading fertilizer, replicate 1).\n> -   Cultivar: Student A(Capone) Student B (Patras, Pionier) Student C (Potenzial)\\\n> -   Date: 5 batches from 11.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Selected treatment and var](phenotyping_rule_files/figure-html/fig-1-1.png){#fig-1 width=960}\n:::\n:::\n\n\n## Protocol\n\n1.  Clean up the table. Place one A4 paper on the table.\n2.  Take out ***one ear at a time*** from a bag containing 10 ears.\n3.  download grain_counting_example.xlsx from [HuBox](https://box.hu-berlin.de/d/fc7db144021a4a35a086/?p=%2Fdata&mode=list)\n4.  **Copy** to your repository under relative path `./data/Grain_Counting/` **save it as** `gc_plotid_batch.xlsx` (@fig-fig2)\n5.  Enter information of `var`, `plot_id` and `ear number` (from 1 to 10)\n6.  Count total `spikelet number (Nsp)`, record the sequence 1: `Nsp` in column `spike`.\n7.  Count the `floret number (Nf)` based on `Nsp` with ascending order (start from spikelet 1).\n8.  Classify the shape of fully developed kernel into three classes (`L,M,S`), record the position of each class, separate them with comma (`,`). For example: 1,2,3 for class `kernel.L` (@fig-fig2)\n9.  Aborted kernel will not be recorded in column `F:H`. However, if special condition observed, you can record it in column `I` (with column name `note`) and take a picture of it.\n10. **Roll your ear** with another half-A4 paper **like a candy**. Make sure you have the ear number and plotid on the outer side of the paper. And put it back to the bag.\n11. Check the **correctness and completeness** of the data in current sheet**. Save the data, *start another ear in a new sheet*.**\n12. **Get up and take a small break!**\n\n![Figure 2](protocol.png){#fig-fig2}\n\n::: callout-warning\n## Challenge: automatize process of reading files\n\nUse the code below to reach the following goals.\n\n1.  Write a `for loop` to read all the files and sheets in the folder\n2.  add batch information to column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\np <- \".data/Grain_Counting/gc_57_11.xlsx\"\ndf <- readxl::read_xlsx(p) %>% \n  mutate(across(starts_with(\"kernel\"),function(x)as.character(x))) %>% \n  tidyr::pivot_longer(starts_with(\"kernel\"),names_to = \"kernel.type\",values_to = \"floret.pos\") %>% \n  mutate(floret.pos=strsplit(floret.pos,\",\")) %>% \n  tidyr::unnest(floret.pos) %>% \n  mutate(floret.pos=as.numeric(floret.pos) %>%replace(., is.na(.), 0))\n```\n:::\n\n:::\n",
    "supporting": [
      "phenotyping_rule_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}