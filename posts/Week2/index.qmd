---
title: "Week2: Working directory and accessor"
author: "Tien-Cheng"
categories: [accessor,working directory]
image: "growth.png"
toc-location: right
website: 
  sidebar:
    search: true
number-sections: true
format:
  html: 
    html-math-method: katex
reference-location: margin
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(magrittr);suppressWarnings(library(dplyr));
suppressWarnings(library(ggplot2));library(tidyr);
library(kableExtra);library(knitr);library(purrr)
options(dplyr.summarise.inform = FALSE)
data <- read.csv("../data/ear_summarized.csv")
```

Welcome to the second course! 

You will learn `working directory`, subset elements from `vector`, `list` and `dataframe`.

::: callout-note
1. data type `logical` and `operator`
2. accessor `[]`
3. What is working directory (wd)?
4.  How to access elements from `vector`, `list` and `dataframe`
:::


## Conditions: logical operators and vectors

![Logical vector](logical.png)
Logical operators [^3]

[^3]:(https://www.statmethods.net/management/operators.html)

* `L==R`: direction doesn't matters.
* `L%in%R`: one sided, check if object `L` is presence in `R`.
* `!`: negate the logical vector.

```{r,error=TRUE,eval=FALSE}
# check if pattern exist in vector
3%in%c(1,3)
# what is the difference?
c(1,3)%in%3

2%in%c(1,3) 

1==2 
1==c(2,1) 
# elementwise check whether L equals
c(2,1)==1
# check identity pairwise
c(1,2)==c(2,4)

# is '!' reverse the logical vector?
!1==2 
1!=2 
c(1,3)==2
# what does which() returns?
which(c(1,3)==3) 

# what will be the data type? check with str()
c(1,2,NA) %>% is.na() 
c(1,2,NA) %>% is.na() %>% which() 
c(1,2,NA) %>% is.na() %>% !.
c(1,2,NA) %>% !is.na() 
!is.na(c(1,2,NA))
```

Preconditions examples inside a function
```{r,error=TRUE,eval=FALSE}
# check if data type match
arg <- ""
is.character(arg)
if(is.character(arg)){
  print("character")
}

if(is.character(arg)){
  print("character")
}else{
  error("type other than character")
}

if(is.character(arg)){
  warning("wrong")
}

if(is.character(arg)){
  stop("wrong")
}
```

::: {.callout-tip }
# challenge
Inside your `plusone` function, please check first whether input `x` is numeric, then proceed the process.

if not, return with message "wrong input type" using `stop()`
:::


## Working directory (wd)

`"."` means the working directory (wd), the path in which `R.project` exists.

`".."` means the parent (one level higher) directory of `"."`.

::: {.callout-tip collapse="true"}
# click for example
![](wdirectory.png)
:::

```{r,error=TRUE,eval=FALSE}
library(dplyr)

# working directory, abbreviated as "."
getwd()
# parent directory, abbreviated as ".."
dirname(getwd())
# assign current path to variable
current_path <- getwd()
# check the type 
current_path %>% str()


# check files in the directory

# are they different?
"." %>% list.files(path=.)
getwd() %>% list.files(path=.)

# are they different?
".." %>% list.files(path=.)
getwd() %>% dirname() %>% list.files(path=.)

```

::: {.callout-tip }
# challenge
Although the meaning of `.` is the same as `getwd()`, the content is depending on the environment you are working with.

Right click R studio logo, open a new R studio window, compare the result of `getwd()` in R project and R
:::

### accessing files and folder inside a R project

Which one do you prefer? Why do we prefer relative path?

```{r,error=TRUE,eval=FALSE}
# absolute path, did you get error?
"C:/Users/marse/seadrive_root/Tien-Che/My Libraries/PhD_Tien/Project/Postdoc_teaching/BSC_project_IPFS2023/data" %>% list.files(path=.)
# relative path in R base
parent_path <- getwd() 
paste0(parent_path,"/data") %>% list.files(path=.)

# Does this works? 
".\data" %>% list.files(path=.)
"data" %>% list.files(path=.)

```

::: {.callout-tip }
# challenge
read from relative path, which one is correct? Assume working directory `current_path` is `"C/users/Wheat_BSC_project/src"`

`Absolute_path = current_path +"/"+relative_path` Below are four relative paths. Please rewrite them in absolute (full) path form. What should `.` be replace? Which two are the same? Based on the figure illustated below, path 1-4 should be A,B,C or D?

1.  `"ear_summarized.csv"`

2.  `"data/ear_summarized.csv"`

3.  `"./data/ear_summarized.csv"`

4.  `"../data/ear_summarized.csv"`

![](wd.png){}
:::

## get element from a vetor with `accessors []`
![accessor](accessor.PNG)

vector indexing start from 1 to the length of the vector.
![vector and derrivetaives](vectors.png)
```{r,eval=FALSE,error=TRUE}

empty_vec <- c()
length(empty_vec)
# what is the type of the empty vec?
empty_vec %>% str()

# NULL: empty 
empty_vec[1]
empty_vec[0]


vec <- c(1,3,5)
vec[1]
#reorder the vector 
vec[c(2,1,3)]
# removing the indexed elements
vec[-1]
vec[-2]

# indexing start from 1, not 0
# therefore you get, numeric(0)
vec[0]
# when access exceeding the range of a vector, what datatype do you get? 
vec[4]
vec %>% .[length(.)+1]
vec[1:4]
vec[4:1]

# find specific element or position
vec[c(F,T,F)]
vec[vec==5]
# when codition not match at all, it will return? 
vec[vec==2]
vec[c(F,F,F)]
vec %>% .[c(F)]
vec[vec=="a"]

# default str vector
letters
LETTERS
# when the query does not match, guess what will be the datatype? 
letters %>% .[.==2]
letters %>% .[c(F)]
# vector over write
vec
vec <- c(2,1,3)
vec

# what will be the difference?
order(c(3,1,2)) 
c(3,1,2) %>% .[order(.)]
```

::: {.callout-tip }
# challenge
```{r,eval=TRUE}
vec <- c(1, 2, 3, 4, 5)
logical_vec <- c(TRUE, FALSE)
subset_vec <- vec[logical_vec]
subset_vec
```

what did you observe? Is there any [vector recycling](https://rpubs.com/vipero7/vector-recycling-in-r)?

What happen when you enter `vec[TRUE]`?
:::

Supplementary information of special datatypes:[^1]

[^1]: Empty : [`NULL`](https://www.r-bloggers.com/2018/07/r-null-values-null-na-nan-inf/)\
Indexing at zero position:[`numeric(0)`](https://www.programmingr.com/r-error-messages/numeric0-error/)

### list: keep the diversity of data type

list_object\<- list(`element_name`=`value`) Make a list is like put a `cookie`(content of list element) in the `cookie jar`(list element).

There are 3 common accessors for `list`: 1. access the list element (`cookie jar`)

`[]` access the list position

2.  acess the content of list element (`cookie`)

`[[]]` access the content of a list element by position or name

`$` access the content of a list element by name

list_object`$element_name` or list_object`[[element_name]]`

![list without name](list_example.png){width="800,height"}

![list with name](list_example2.png){width="800,height"}

More about the accessors. [^2]

[^2]: [accessors](https://www.r-bloggers.com/2009/10/r-accessors-explained/)



```{r,eval=FALSE}
# create a simple list
list(1)
# create a simple list with name "x" for first element
list(x=1)
list(x=1)["x"]
# extract content
list(x=1)$"x"
list(x=1)[[1]]
list(x=1)[["x"]]

# extract with pipe
list(x=1) %>% .[[1]]
list(x=1) %>% .$"x"

# long list
long_list_example <- list(1,c(1,2),
                          T,c(T,T),
                          "str",c("a","b"),
                          list(1),
                          mean,data.frame())
# check structure of this list 
# list_complex_example %>% str()
# list_complex_example %>% glimpse()
# list_complex_example
# first list 
long_list_example[1]
# content of first list
long_list_example[[1]]
# first element of content of first list
long_list_example[[1]][1]

```

::: {.callout-tip }
# challenge
can you guess what data type are these?

```{r,eval=FALSE}
# non-sense
long_list_example[[1]][2]
long_list_example[1][1]
long_list_example[1][2]
long_list_example[2][2]
# meaningful
long_list_example[[2]][2]
```
:::

### lapply: return as a list

lapply(vector, function) ?lapply

```{r,eval=FALSE}
# input is vector
c(1,4) %>% 
  lapply(.,FUN=function(x){x+3})
# input is list
list(2,4,c(1,4)) %>% 
  lapply(.,FUN=function(x){x+3})
# input has differnt type
list(2,4,c(1,4),"8") %>% 
  lapply(.,FUN=function(x){x+3})

```

::: {.callout-tip }
# challenge
Why you get error in the last line?
:::

### dataframe is a special type of list

each column has one data type

```{r,error=TRUE,eval=FALSE}
# create a dataframe 
df <- data.frame(time=as.Date("2023-04-16",format="%Y-%m-%d")+seq(1,3,1),\temp=c(20,15,13),\thermal_time=cumsum(c(20,15,13)))
# another way
df <- data.frame(time=as.Date("2023-04-16",format="%Y-%m-%d")+seq(1,3,1)) 
df$temp=c(20,15,13)
df$thermal_time=cumsum(df$temp)

# third method
library(dplyr)
df <- data.frame(time=as.Date("2023-04-16",format="%Y-%m-%d")+seq(1,3,1)) %>% 
  mutate(temp=c(20,15,13), 
         thermal_time=cumsum(temp))
df

```

::: {.callout-tip }
# challenge
Is it possible to create data frame with vectors of different length?

```{r,eval=FALSE}
data.frame(time=as.Date("2023-04-16",format="%Y-%m-%d")+seq(1,3,1), 
           temp=c(20,13))
```
:::

### extract columns from data frame

You can subset `dataframe` by indexing \[`row`,`column`\]

`dataframe`\[,`column`\] select the whole role for selected columnn

`dataframe`\[`row`,\] select the whole column of selected rows

Select multiple row or column by puting logical or numeric vector in the square bracket.

```{r,echo=FALSE,eval=FALSE}
df[1,]
df[,]
df[,1]
df[1,1]
df[1:2,1]
# which is of type dataframe?
df$temp %>% str()
df["temp"] %>% str()
df[,"temp"] %>% str()
df[["temp"]] %>% str()
df[,1] %>% str()
```

::: {.callout-tip }
# challenge
use `df`,

1.  Access column `thermal_time` as `vector`

2.  Extract `temp` when `time` is `2023-04-17`

3.  Extract first row and first column with `[1,]`and `[,1]`
:::

::: callout-challenge
if you want to turn a data frame (`df`) by 90 degree ("transpose"), which function can you use? Could you find the answer on google or chatGPT?
:::
