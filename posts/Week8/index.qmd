---
title: "Week8: Loops"
author: "Tien-Cheng"
categories: [R-intermediate]

toc-location: right
number-sections: true
website: 
  sidebar:
    search: true
format:
  html: 
    grid:
      # sidebar-width: 300px
      # body-width: 1200px
      # margin-width: 100px
      gutter-width: 1.5rem

reference-location: margin
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(magrittr);suppressWarnings(library(dplyr));
suppressWarnings(library(ggplot2));library(tidyr);library(purrr)
options(dplyr.summarise.inform = FALSE)

dat <-read.csv('../data/kernel_combine.csv',
               header = T,stringsAsFactors = F) %>%
  dplyr::filter(tiller=="M")
```

Welcome to the eighth course! You will learn more about `for-loop` and `data visualization`:

::: callout-note
# Learning goals

1.  requirements of merging *dataframes*
2.  *save* or *show* the result of *for loop*
3.  `ggplot()`
:::

::: callout-warning
## Discussion

1.  What is the component for-loop? How to check if it works for each element?
2.  what are `long` and `wide`? when to use what?
:::

## Student's data

practice with files from `data/student`.

### How to save the column names of all files in a directory to a list using for loop?

::: callout-important
# For loop concept

![](forloop1.png)

```{r,eval=FALSE}
path <- "./data/student/"
filenames <- list.files(path,pattern=".xlsx")
#create empty list
df <- vector(mode="list",length=length(filenames))

for(i in 1:length(filenames)){
  fullpath <- paste0(path,filenames[i])
  df[[i]] <- xlsx::read.xlsx(fullpath,
                             sheetIndex = 1) %>% 
    names()
}

df 
```
:::

### How to name list elements based on student's name ?

```{r,echo=FALSE}

df<- map(list.files("../data/student"),~{
  xlsx::read.xlsx(paste0("../data/student/",.x),sheetIndex = 1) %>% 
    names()
})
names(df) <-
  purrr::map(list.files("../data/student"),  ~{
    .x %>% strsplit("_") %>% unlist()
  }) %>% map_chr(.,~{.x[4] %>% sub(".xlsx","",.)})
df 
```

::: {.callout-tip collapse="true"}
# click for answer

```{r,echo=TRUE,eval=FALSE}
student_name <-   purrr::map_chr(filenames,  ~{
  .x %>% strsplit("_") %>% unlist() %>% 
    .[4] %>% sub(".xlsx","",.)
}) 
names(df) <-student_name
df
```
:::

### How to combine all the dataframe by row?

If you know the column names are different, can you still combine them?

```{r}
df<- map_dfr(list.files("./data/student"),~{
  
  file<- xlsx::read.xlsx(paste0("./data/student/",.x),sheetIndex = 1)
})
df %>% 
  glimpse()
```

Here are possible steps:

::: {.callout-note appearance="simple"}
-   observe the patterns of column names, how to unify the column names?
-   replace "kernal" with "kernel"
-   replace "spikes" with "spike"
-   replace "plot.id" with "plot_id"
-   how to add the student's name as a column? where should you put it in the for-loop body?
-   how to fill the missing cultivar and plot_id?
-   remove "na." column check your loop-body with the first element in your range.
:::

::: {.callout-tip collapse="true"}
# click for answer
```{r,echo=F}
library(magrittr)
df<- map_dfr(list.files("../data/student"),~{
  
  student_name <-  .x %>% strsplit("_") %>% unlist() %>% 
    .[4] %>% sub(".xlsx","",.)
  
  file<- xlsx::read.xlsx(paste0("../data/student/",.x),sheetIndex = 1) %>%  
    `colnames<-`(stringr::str_to_lower(names(.)))%>% 
    `colnames<-`(gsub("kernal","kernel",names(.))) %>% 
    `colnames<-`(gsub("spikes","spike",names(.)))%>%
    `colnames<-`(gsub("plot.id","plot_id",names(.))) %>% 
    mutate(student=student_name)
}) 
df %<>% mutate(var="Capone",plot_id=159) %>% 
  .[!grepl("na.",names(.))]
df %>% glimpse()
```
```{r,eval=F}
library(magrittr)
df<- map_dfr(list.files("./data/student"),~{
  
  student_name <-  .x %>% strsplit("_") %>% unlist() %>% 
    .[4] %>% sub(".xlsx","",.)
  
  file<- xlsx::read.xlsx(paste0("./data/student/",.x),sheetIndex = 1) %>%  
    `colnames<-`(stringr::str_to_lower(names(.)))%>% 
    `colnames<-`(gsub("kernal","kernel",names(.))) %>% 
    `colnames<-`(gsub("spikes","spike",names(.)))%>%
    `colnames<-`(gsub("plot.id","plot_id",names(.))) %>% 
    mutate(student=student_name)
}) 
df %<>% mutate(var="Capone",plot_id=159) %>% 
  .[!grepl("na.",names(.))]
df %>% glimpse()
```

This answer is written in `map_()` series, could you rewrite in for loop?
:::

### How to visualize the result?

Practice to make a draft, what will be the `x` and `y`, what will be the `color`?

Is there difference between geom_line() and [geom_path()](https://ggplot2.tidyverse.org/reference/geom_path.html)?

```{r,echo=FALSE}
#| layout-ncol: 2
#| fig-cap: 
#|   - "Line Plot 1"
#|   - "Line Plot 2"
df %>% 
  group_by(student,spike) %>% 
  ggplot(aes(flower,spike,color=student))+
  geom_line(alpha=.5)+
  theme(legend.position = "bottom")

df %>% 
  group_by(student,spike) %>% 
  ggplot(aes(flower,spike,color=student))+
  geom_point()+
  geom_path(alpha=.5)+
  theme(legend.position = "bottom")

```

::: {.callout-tip collapse="true"}
# click for answer

```{r,eval=FALSE}
# line plot 1
df %>% 
  group_by(student,spike) %>% 
  ggplot(aes(flower,spike,color=student))+
  geom_line(alpha=.5)+
  theme(legend.position = "bottom")
# line plot 2
df %>% 
  group_by(student,spike) %>% 
  ggplot(aes(flower,spike,color=student))+
  geom_point()+
  geom_path(alpha=.5)+
  theme(legend.position = "bottom")

```
:::

## recommendation

[Advanced R: control flow](https://adv-r.hadley.nz/control-flow.html)
