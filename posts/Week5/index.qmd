---
title: "Week5: pattern matching in dataframe"
author: "Tien-Cheng"
categories: [R-intermediate]

toc-location: right
number-sections: true
website: 
  sidebar:
    search: true
format:
  html: 
    grid:
      sidebar-width: 300px
      body-width: 900px
      margin-width: 300px
      gutter-width: 1.5rem

reference-location: margin
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(magrittr);suppressWarnings(library(dplyr));
suppressWarnings(library(ggplot2));library(tidyr);
library(kableExtra);library(knitr);library(purrr)
options(dplyr.summarise.inform = FALSE)
data <- read.csv("../data/ear_summarized.csv")
phenology <- read.csv('../data/phenology_short.csv')
dat <-read.csv('../data/kernel_combine.csv',
               header = T,stringsAsFactors = F) %>%
  dplyr::filter(tiller=="M")

climate <- read.csv("../data/climate.csv")
```

Welcome to the fifth course! You will learn more about `dataframe` wrangling:

::: callout-note
# Learning goals

1.  data frame wrangling with `dplyr` and `tidyr`
:::

## Today's discussion

Is it possible to access the elements at different columns and rows?

```{r,eval=FALSE}
df <- data.frame(
  x1=1:3,
  x2=letters[1:3],
  x3=c("2a","2b","2c")
)
# or condition separate by |
df$x1==2|df$x3=="2c"

df %>% filter(x1==2|x3=="2c")
df %>% with(.,x1==2|x3=="2c")

# when not specifying the comma, it will be treated like column
df %>% with(.,.[x1==2|x3=="2c"])
# specify the rows
df %>% with(.,.[x1==2|x3=="2c",])

```

## more mutate examples

Last week's practice.

```{r}
df <- expand.grid(x=letters[1:4],
                  y=1:2)%>%
  # combine columns x and y 
  mutate(z=interaction(x,y))
rownames(df) <- LETTERS[1:nrow(df)]
```

### replace column

#### replace one column based on single condition

```{r,eval=FALSE}
df %>% mutate(k=ifelse(x=="a","A","B"))
df %>% mutate(k=ifelse(y==1,"A","B"))
df %>% mutate(k=case_when(x=="a"~"A",
                          TRUE~"B"))
```

::: callout-warning
## practice

Matching multiple conditions

add column `k` to `df`,
when the condition x equals "a" `and` y equals 1.
if `TRUE` return 'A', else return 'B'.

:::

#### replace one column based on multiple conditions

in `case_when` syntax, `TRUE` before `~` stands for the `else` conditions.

```{r,eval=FALSE}
df %>% mutate(k=case_when(x=="a"~"A",
                          x=="b"~"B",
                          TRUE~"C"))
```

#### Look up table

```{r}
look_table <- data.frame(x=letters,
                         X=LETTERS)
df %>% merge(look_table)

```

::: callout-warning
## practice

`merge` is not actually replace the original column.

Write a function to replace `letters` with `LETTERS`. The input is a vector of lower case vector `vec <- c("c","a","b","d")`, output will be the matched upper case vector `c("C","A","B","D")`.

Hint: check function `match()` !!Before you start to write the code, please first write down the possible steps in text.!!
:::
