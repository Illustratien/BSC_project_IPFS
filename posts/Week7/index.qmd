---
title: "Week7: Shape of dataframe"
author: "Tien-Cheng"
categories: [R-intermediate]

toc-location: right
# number-sections: true
website: 
  sidebar:
    search: true
format:
  html: 
    grid:
      sidebar-width: 300px
      body-width: 1200px
      margin-width: 100px
      gutter-width: 1.5rem

reference-location: margin
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(magrittr);suppressWarnings(library(dplyr));
suppressWarnings(library(ggplot2));library(tidyr);
library(kableExtra);library(knitr);library(purrr)
options(dplyr.summarise.inform = FALSE)
data <- read.csv("../data/ear_summarized.csv")
phenology <- read.csv('../data/phenology_short.csv')
dat <-read.csv('../data/kernel_combine.csv',
               header = T,stringsAsFactors = F) %>%
  dplyr::filter(tiller=="M")

climate <- read.csv("../data/climate.csv")
```

Welcome to the seventh course! You will learn more about `dataframe` wrangling:

::: callout-note
# Learning goals

1.  data frame wrangling with `dplyr` and `tidyr`
2.  `ggplot()`
:::

::: callout-warning
## Discussion

9.  What is `case_when()`? How to write the syntax?
10. When to use `match()` and `order()`?
:::

## Logic of coding

![](coding_logic.png)

1.  Check: examine the datatype of each column in your dataframe.

2.  Drafting: draw the draft of your desired output.

3.  Target columns: identify which columns you would need to generate the output.

4.  Steps: write down the possible steps which required to generate the target columns.

::: callout-warning
## challenge

Here is a draft from coding logic step2. Please practice step 1, 3 & 4 with `climate.csv`. Finally, can you reproduce this figure?

```{r,echo=FALSE}
#| label: fig-ACC
#| fig-cap: "step2: Draft of target"
climate %>% 
  # dplyr::filter(DFG_year%in%c("DFG2019","DFG2020")) %>% 
  group_by(DFG_year,sowing_date) %>% 
  mutate(DayTime=as.Date(DayTime,format="%Y-%m-%d"),
         DAS=as.numeric(DayTime-min(DayTime))) %>% 
  ggplot(aes(x=DAS,y=Acc_Temperature,color=DFG_year,
             group=interaction(sowing_date,DFG_year)))+
  # geom_point()+
  geom_line(aes(linetype=sowing_date),linewidth=1)+
  theme_bw()+
  theme(legend.position = c(.1,.65))+
  labs(x="Days after sowing",y= "Thermal sum (°Cd)")+
  guides(color=guide_legend(title="Year"))
```
:::

::: {.callout-note collapse="true"}
## answer for steps

1.  check the datatype of `DayTime`, make sure it is `Date`.
2.  `group_by`year and sowing date, `mutate` a new column called `DAS`(Days after sowing).
3.  use `ggplot` to visualize this dataframe with points and lines:

x is `DAS`, y is `Acc_Temperature`, color is `DFG_year` and the points should be linked of same `DFG_year` and `sowing_date`.

Is there additional columns required?
:::

::: {.callout-note collapse="true"}
## answer for code

```{r,eval=FALSE}
climate %>% 
  # dplyr::filter(DFG_year%in%c("DFG2019","DFG2020")) %>% 
  group_by(DFG_year,sowing_date) %>% 
  mutate(DayTime=as.Date(DayTime,format="%Y-%m-%d"),
         DAS=as.numeric(DayTime-min(DayTime))) %>% 
  ggplot(aes(x=DAS,y=Acc_Temperature,color=DFG_year,
             group=interaction(sowing_date,DFG_year)))+
  # geom_point()+
  geom_line(aes(linetype=sowing_date),linewidth=1)+
  theme_bw()+
  theme(legend.position = c(.1,.65))+
  labs(x="Days after sowing",y= "Thermal sum (°Cd)")+
  guides(color=guide_legend(title="Year"))
```
:::

### how to get the minimum unique combination of dataframe?

how many unique year-months combinations were included in \`climate 2019 for early and late sowing?

```{r,eval=FALSE}
climate %>% 
  dplyr::filter(DFG_year=="DFG2019") %>% 
  group_by(y,m) %>% 
  summarise()

climate %>% 
  dplyr::filter(DFG_year=="DFG2019") %>% 
  dplyr::select(y,m) %>% 
  dplyr::distinct()

```

::: callout-warning
## challenge

read `ear_summarized.csv` and extract the unique combinations of nitrogen, appl and timeid

```{r,echo=FALSE}
data %>% 
  dplyr::select(nitrogen,appl,timeid) %>% 
  dplyr::distinct()
```
:::

## Shapes of dataframe.

![](wide_long.png)

In general, we can describe the shape of dataframe as wide or long.[^1]

[^1]: [tidyr cheatsheet](https://tidyr.tidyverse.org) [tidyr example](https://tidyr.tidyverse.org/articles/tidy-data.html)

-   Wide refers to a dataframe which each column is one trait.

-   Long refers to a dataframe which multiple trait names in one column and multiple trait values in another one.

### Relationship of shape of dataframe and data processing

`mutate()` is designed for column-wise calculation.

wide format:

-   `across()` provide quick access to multiple columns, could be useful for wide format.

long format:

-   Since the values are concentrated in one column, this format is suitable for unifying operation.
-   `facet_grid()` will required a column which stores the grouping information for facet. This is can be achieved via the long format.

### wide to long

In the following examples, we want a unifying change

```{r}
#| label: fig-facet
#| fig-cap: "long format and facet"
#| fig-width: 12
#| fig-height: 6

# climate %>%glimpse()
climate_long <- climate %>% 
  tidyr::pivot_longer(names_to = "Daily_Terms",
                      values_to = "Daily_value",
                      cols = contains("Daily")) 
# climate_long%>%   names()

#select cols by position
# grep("(Daily|Acc)",names(climate))
climate_long <- climate %>% 
  tidyr::pivot_longer(names_to = "Terms",
                      values_to = "value",
                      # select both patterns
                      cols = grep("(Daily|Acc)",names(.)))

# climate_long%>% names()

## data processing example
climate_long_subset<- climate_long %>% 
  filter(Terms%in%c('Acc_Temperature','Acc_Precipitation')) %>% 
  group_by(DFG_year,sowing_date,Terms) %>%
  summarise(Value=mean(value))

climate_long_subset

#Fig 2
library(scales) %>% suppressMessages()

climate_long %>% 
  filter(Terms%in%c('Acc_Temperature','Acc_Radiation'),
         sowing_date=='Early') %>% 
  group_by(DFG_year,sowing_date) %>% 
  mutate(DayTime=as.Date(DayTime,format="%Y-%m-%d"),
         DAS=as.numeric(DayTime-min(DayTime))) %>% 
  ggplot(aes(DAS,value,color=DFG_year))+
  geom_line()+
  facet_grid(~Terms)+
  theme_test()+
  theme(strip.background = element_blank(),
        strip.text = element_text(size=14),
        axis.text = element_text(size=14),
        axis.title = element_text(size=14),
        legend.position = c(.1,.1))+
  scale_y_log10(
    labels = label_number(scale_cut = cut_short_scale())
  )+
  xlab('Days after sowing')

```

::: callout-warning
## challenge

Analyze the code that generating Fig2.

Figure out how it works by blocking one line at a time. add documentation for each line.

Which function need package `scales`?
:::

### long ↔ wide

Theoretically, we can easzily switch between the forms. Are they really the same after transforming back?

```{r}
# long
climate_long <- climate %>% # climate is wide
  tidyr::pivot_longer(names_to = "Daily_Terms",
                      values_to = "Daily_value",
                      cols = contains("Daily")) 
# wide again
climate_wide<- climate_long%>% 
  tidyr::pivot_wider(names_from = "Daily_Terms",
                     values_from = "Daily_value")

# check if they are the same 
setdiff(names(climate),names(climate_wide))

all.equal(climate,climate_wide)
# change the order of column
all.equal(climate,climate_wide[,names(climate)])
# change the type
all.equal(climate,climate_wide[,names(climate)]%>% as.data.frame())
```

::: callout-warning
## Discussion

`wide` refers to one column one trait and `long` denotes the stacked traits in two columns (names and values).

1.  From `select` and `filter` point of view, when is `wide` format useful and when is `long` ideal?

2.  If you want to `mutate` a column based on calculation between multiple traits, e.g., `DailyMean_Temperature`-`DailySum_Percipitation`/`DailySum_Radiation`, then which format is more suitable? or is it both possible?
:::

<!-- ### Protocols of making a regression plot -->

<!-- [![Click to read original article](Protocol.jpg)](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12577) -->

## Looping with for(), lapply() and map()

deal repetitive tasks with loops.[^2]

[^2]: [lapply vs for loop](https://nicercode.github.io/guides/repeating-things/)

[lapply vs purrr](https://stackoverflow.com/questions/45101045/why-use-purrrmap-instead-of-lapply)

```{r,eval=FALSE}
filename <- c('grain_counting_practice_studentName1.xlsx',
              'grain_counting_practice_studentName2.xlsx')
file_list<- filename %>% strsplit("_")
# tradition way of for loop
res <- c()
for(i in 1:2){
  res <- c(res,file_list[[i]][4])
}

# alternative in r package purrr
# chr stands for the "character" output.
purrr::map_chr(1:length(file_list),  ~{
  file_list[[.x]][4]
})

# notice that the output of map_chr must be 1 element per iteration.
purrr::map_chr(filename,  ~{
  .x %>% strsplit("_") %>% unlist()
})

# equivalent
purrr::map(filename,  ~{
  .x %>% strsplit("_") %>% unlist()
})

lapply(filename,function(x){
  x %>% strsplit("_") %>% unlist()
})
```

### read your own data

Go to [HU-box](https://box.hu-berlin.de/d/fc7db144021a4a35a086/), download the `student` folder.

::: callout-note
## challenge

using for loop, extract the student name from file name.
1. list the files of the folder `student` using `list.files()` 
2. write your own for loop.
![](forloop.png)
```{r,echo=FALSE}

df<- map(list.files("./data/student"),~{
  xlsx::read.xlsx(paste0("./data/student/",.x),sheetIndex = 1) %>% 
    names()
})
names(df) <-
  purrr::map(list.files("./data/student"),  ~{
    .x %>% strsplit("_") %>% unlist()
  }) %>% map_chr(.,~{.x[4] %>% sub(".xlsx","",.)})
df 

```
:::

## recommendation

[purrr](https://www.rebeccabarter.com/blog/2019-08-19_purrr)
