---
title: "Week1: R studio, vector and function"
author: "Tien-Cheng"
categories: [R-project,data type,vector,Github,function]
image: "Assign.png"
toc-location: right
website: 
  sidebar:
    search: true
number-sections: true
format:
  html: 
    html-math-method: katex
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(magrittr);suppressWarnings(library(dplyr));
suppressWarnings(library(ggplot2));library(tidyr);
library(kableExtra);library(knitr);library(purrr)
options(dplyr.summarise.inform = FALSE)
```



Welcome to the first course! During the following 2 hrs, you will learn data type of [`vectors`](https://towardsdatascience.com/learning-r-data-types-e698d23f8179#:~:text=First%2C%20R%20doesn%27t%20have,in%20R%20language%20is%20vector.), `function` and `%>%`.

::: callout-note
1.  set up Rstudio, Github, and name space
2.  vector and 3 basic data types: ("chr","numeric","Date")
3.  functions, documentation and data type check
4.  meaning of `%>%` and `.`
:::

## Set up your working directory

### preparation

1.  Please make sure you have installed [`R & Rstudio`](https://posit.co/download/rstudio-desktop/).

![](Rproj.png){width=400}

2.  Open Rstudio, File -\> New Project -\> `Wheat_BSC_project`, click `create a git repository`
3.  download the data from [HU-box](https://box.hu-berlin.de/d/fc7db144021a4a35a086/), save it in `data`.
4.  create Week1.R and save it in folder `src`.
5.  Open `github desktop` 

<!-- ::: {layout-ncol=2} -->
  ![](../localrepo.PNG){width=350}
  ![](../selectpath.PNG){width=350}

<!-- ::: -->
6. comment&commit & push

![](../commit.PNG){width=400}

7. Press `Ctrl+ Shift +N`to open new script.
8. Save it as `Week1.R` Copy code from this website to your script and press `run`.

!['folder structure'](../Week2/folder.PNG){width="800,height"}

### Concept of datatype & name space:

1.  Don't overwrite `variable names` in name space (what already exists in system).

    -   eg., `var`,`mean`,`aov`, etc. 
    
::: callout-warning
avoid *something that will show in the drop down menu of auto-completion.*

![Name space](dropdown.PNG){width="800,height"}\
:::

2.  Separate long `variable names` with `_`.

    -   eg., `thermal_time`,`mean_yield`, etc.

3.  Don't start `variable names` with number.

|     |        Bad        |       Better       |
|:---:|:-----------------:|:------------------:|
|     |     `3years`      |   `three_years`    |
|     | `1225measurement` | `measurement_1225` |
|     |   `13genotypes`   |   `genotypes_13`   |

![Structure of a vector](vector.png){width="800,height"}

Variable = variable names + object ![Syntax of assigning names to variable](Assign.png){width="800,height"}

## Data type is everything

```{r,error=TRUE,eval=FALSE}
variable
# assignment str"v" to name "variable"
## "" and unquote str and variable 
variable <- "v"
Variable <- 1

variable +1
Variable +1 
```

### Always check your data type first!

```{r,error=TRUE,eval=FALSE}
# str??
str
?str
str(variable)
str(Variable)
# data type coersion
str(NA)
str(c(NA,1))
str(c(NA,"a"))
str(c(NA,TRUE))
str(c(1,"a"))
```

### Date {#sec-date}

```{r,echo=TRUE,error=TRUE,eval=FALSE}
as.Date("2023-04-17")
as.Date("2023-04-17",format="%Y-%m-%d")
# is ther any error?
as.Date("20230417")
as.Date("17042023")
# additive properties of Date 
as.Date("2023-04-17")-7
as.Date("2023-04-17")+2
```

## Function: something ends with `()`

![How function works?](function.png){width="800,height"}

```{r,error=TRUE,eval=FALSE}
# example: fun(object)
c(1,2,3)
seq(1,3,1)

mean(c(1,2,3))
str(TRUE)
```

### r packages : collection of functions

Check this great package [tidyverse](https://dplyr.tidyverse.org/)!

-   Note that windows user may need to first download the [Rtools](https://cran.r-project.org/bin/windows/Rtools/) that match your R version.

You can check your R version by typing `version()` in your R console.

```{r,error=TRUE,eval=FALSE}
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
```

### separate individual function from nested functions with `%>%`

Pipe (`%>%`) is available in r-package either `dplyr` or `magrittr`.

Please use `%>%` to avoid embedded functions.

`.`stands for the result from the left side of the pipe.

For long line code, press `enter` after each `%>%`.

Select all the codes by `ctrl A`.

Indent the selected codes by `ctrl I`.

Concepts of using pipe

```{r,error=TRUE,eval=FALSE}
# syntax of using pipe
library(dplyr)

fun1(object)
# .= object
object %>% fun1(.)
# . could be also skipped
object %>% fun1()

# . = fun1(object)
object %>% fun1() %>% .
object %>% fun1(.) %>% .

#embedded functions
fun2(fun1(object))
# .=fun2(fun1(object))
object %>% 
  fun1() %>% 
  fun2() %>% .

```

Examples of using pipe

```{r,error=TRUE,eval=FALSE}
# how many ways of creating a sequence?
c(1,2,3)
seq(1,3,1)

# embedded function : fun2(fun1())
length(c(1,2,3))
# use pipe, "." is the result of previous step
c(1,2,3) %>% length(.)

# replicate element as vector
rep(1,3)
# remove duplicates
rep(1,3) %>% unique()
# cumulative sum 
rep(1,3) %>% cumsum()

# is there any difference?
paste(c("a","1"),collapse = "")
paste0(c("a","1"))
paste0("a","1")
```

::: {.callout-tip }
# challenge
We introduced data type `Date`  in @sec-date, 
It actually behave like numeric sequence.
You have Vector of type `date`, length is 1, value is "2023-04-17".

```{r,error=TRUE,eval=FALSE}
date_element <- as.Date('2023-04-17')
```
1. How to create  `date` vector of length 5? 
```{r,echo=FALSE}
as.Date("2023-04-16",format="%Y-%m-%d")+seq(1,5,1)
```

2. Could you do the average of this vector?
:::

::: {.callout-tip }
# challenge
Use `str()` to check the data type of variable in your environment.

You have two vectors, 
```{r,eval=FALSE}
vec1<-c("a","b")
vec2<-c("1","2")
```
How to use `paste` and `rep`to create sequence of `char` vector shown below?
```{r,echo=FALSE}
paste0(rep(c("a","b"),each=2),rep(c(1,2),times=2))
paste0(rep(c("a","b"),times=2),rep(c(1,2),each=2))
```

Check the arguments of `rep` to get more hints. 
```{r,eval=FALSE}
?rep
```
e.g.,

* `rep(c("a","b"),each=2)`

* `rep(c("a","b"),times=2)`

:::

### write your first function

format: `function_name`(`argument1`, `argument2`) {`code`} example:

```{r,error=TRUE,eval=FALSE}
plusone <- function(x){
  x+1
}
# is function data type sensitive?
plusone(variable)
plusone(Variable) 
```

function with good documentation example:

```{r,error=TRUE,eval=FALSE}
function_name  <-function(input){
  # input: datatype, length, meaning.
  # output: datatype, length, meaning.
  # action1: intermediate_variable <- input %>% fun1()
  # action2: output <-intermediate_variable%>% fun2()
  ...
  return(output)
}
```

::: {.callout-tip }
# challenge
write a function with documentation: input `vec` is a numeric vector with length 3, return `str` of average value of `vec` Â± standard deviation of `vec`.

Visualize the step in your function by first writing your the possible steps in text!
:::

