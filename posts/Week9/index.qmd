---
title: "Week9: Stomata_data"
author: "Tien-Cheng"
categories: [R-intermediate]
image: "poster_big.png"
toc-location: right
number-sections: true
website: 
  sidebar:
    search: true
format:
  html: 
    grid:
      sidebar-width: 300px
      body-width: 1200px
      margin-width: 100px
      gutter-width: 1.5rem

reference-location: margin
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(magrittr);suppressWarnings(library(dplyr));
suppressWarnings(library(ggplot2));library(tidyr);library(purrr)
options(dplyr.summarise.inform = FALSE)

dat <-read.csv('../data/kernel_combine.csv',
               header = T,stringsAsFactors = F) %>%
  dplyr::filter(tiller=="M")
```

Welcome to the nigth course! You will learn more about`data visualization`:

::: callout-note
# Learning goals

1.  Warm up for final presentation
2.  Data type based story telling

:::

::: callout-warning
## Discussion: Warm up for the final presentation!

1.  How the shape of dataframe is linked to data visualization?
2.  What is the component of for loop? how to examine the function body? Do you need `print()` to see the result?

```{r}
range_vector <- 1:10
for( i in range_vector){
  i+3
}
```

3.  What is important when you want to combine the dataframes row-wise?
4.  What is the format (columns and data type of columns) of self-collected ear data?
5.  Which plot type could be suitable for visualization?
6.  What are the logic of visualization oriented analysis? Could you list the possible steps?
7.  What are essential elements for reproducible analysis? For example, you have a r script which read the files in the folder and plot a plot.

```{r,eval=FALSE}
df <- read.csv("example.csv")
df %>% 
  ggplot() %>% 
  geom_point(aes(x=x,y=y))
```
:::

::: callout-warning
## Excercise:

1.  share your code on github and share it with others.
:::

## Story telling: Warm up for final Presentation

![Figure1: Project Plan](Project.png)

![Figure2: Story type](Story_type.png)

![Figure3: Cycle of visualization](Cycle_of_visualization.png)

[![Visualization based on data type: click picture for source](poster_big.png)](https://www.data-to-viz.com)

[^1] [^2]

[^1]: [Ten simple rules for better figures](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833)

[^2]: [How to Make Good Graphs and Figures for Scientific Papers](https://www.simplifiedsciencepublishing.com/resources/how-to-make-good-graphs-and-figures-for-scientific-papers)

## Exercise with student's data

practice with files from `data/student`.

```{r}
library(magrittr)
df<- map_dfr(list.files("../data/student"),~{
  
  student_name <-  .x %>% strsplit("_") %>% unlist() %>% 
    .[4] %>% sub(".xlsx","",.)
  
  file<- xlsx::read.xlsx(paste0("../data/student/",.x),sheetIndex = 1) %>%  
    `colnames<-`(stringr::str_to_lower(names(.)))%>% 
    `colnames<-`(gsub("kernal","kernel",names(.))) %>% 
    `colnames<-`(gsub("spikes","spike",names(.)))%>%
    `colnames<-`(gsub("plot.id","plot_id",names(.))) %>% 
    mutate(student=student_name)
}) 
df %<>% mutate(var="Capone",plot_id=159) %>% 
  .[!grepl("na.",names(.))]
df %>% glimpse()
```

### How to make it a bit more beautiful?

```{r,echo=FALSE}
# line plot 2
df %>% 
  group_by(student,spike) %>% 
  ggplot(aes(flower,spike,color=student))+
  geom_point()+
  geom_path(alpha=.5)+
  facet_grid(~student)+
  theme_classic()+
  theme(strip.background = element_blank(),
        panel.grid.major.x = element_line(),
        legend.position = "none")
```

::: {.callout-tip collapse="true"}
# click for answer

```{r,eval=FALSE}
df %>% 
  group_by(student,spike) %>% 
  ggplot(aes(flower,spike,color=student))+
  geom_point()+
  geom_path(alpha=.5)+
  facet_grid(~student)+
  theme_classic()+
  theme(strip.background = element_blank(),
        panel.grid.major.x = element_line(),
        legend.position = "none")
```
:::

### How to place kernel-related traits in subplots?

```{r, echo=FALSE}
df %>% 
  pivot_longer(starts_with("kernel"),
               values_to = "kernel",
               names_to="kerneltype") %>% 
  na.omit() %>% 
  group_by(student,spike) %>% 
  ggplot(aes(kernel,spike,color=student))+
  geom_point()+
  geom_path()+
  facet_grid(kerneltype~student)+
  theme_classic()+
  theme(strip.background = element_blank(),
        panel.grid.major.x = element_line(),
        legend.position = "none")

```

1.  `pivot_longer()`to collect kernel-related traits
2.  `facet_grid()`

::: {.callout-tip collapse="true"}
# click for answer

```{r,eval=FALSE}
df %>% 
  pivot_longer(starts_with("kernel"),
               values_to = "kernel",
               names_to="kerneltype") %>% 
  group_by(student,spike) %>% 
  ggplot(aes(kernel,spike,color=student))+
  geom_point()+
  geom_path()+
  facet_grid(kerneltype~student)+
  theme_classic()+
  theme(strip.background = element_blank(),
        panel.grid.major.x = element_line(),
        legend.position = "none")

```
:::

### classify spikelet based on position {#sec-classify}

the spike of the main shoot was dissected to count the total number of floret in

::: {.callout-note appearance="simple"}
-   basal 1/3 spikelet from the bottom)

-   central (middle 1/3 of spikelets)

-   apical (1/3 spikelets from the top)

[reference](https://doi.org/10.1016/j.fcr.2020.107908)
:::

try to clssify each spike into three classes based on their position.

::: {.callout-note appearance="simple"}
# challenge

1.  add new column called `type` using `mutate()`
2.  `cut()` could be useful, which column you should apply to?
3.  what will you get when you pass the result of `cut()` to `as.numeric()`?
4.  use `case_when()` to re-calssify the result of step 3.
5.  based on which columns should you classify? what are your group columns for `group_by`?
:::

::: {.callout-tip collapse="true"}
# click for answer

```{r}
df %<>% 
  group_by(student,plot_id,var) %>% 
  mutate(type=cut(spike,3) %>% as.numeric(),
         type=case_when(type==1~"basal",
                        type==2~"central",
                        T~"apical"))

```
:::



```{r,echo=FALSE}
# devtools::install_github('erocoar/ggpol')
library(ggpol) %>% suppressWarnings()
p <- df%>% 
  ggplot(aes(type,flower,fill=student))+
  geom_boxjitter(aes(color=student),alpha=.4,
                 jitter.shape = 21, jitter.color = NA, 
                 jitter.params = list(height = 0, width = 0.04),
                 outlier.color = NA, errorbar.draw = TRUE)+
  theme_classic()+
  theme(strip.background = element_blank(),
        panel.grid.major.x = element_line(),
        legend.position = "bottom") 
suppressWarnings(
  print(p)
)
```

How to plot this half-box plot?

::: {.callout-tip collapse="true"}
# click for answer

```{r,eval=FALSE}
library(ggpol)
p <- df%>% 
  ggplot(aes(type,flower,fill=student))+
  geom_boxjitter(aes(color=student),alpha=.4,
                 jitter.shape = 21, jitter.color = NA, 
                 jitter.params = list(height = 0, width = 0.04),
                 outlier.color = NA, errorbar.draw = TRUE)+
  theme_classic()+
  theme(strip.background = element_blank(),
        panel.grid.major.x = element_line(),
        legend.position = "bottom") 

print(p)

```
:::

### how to change the order of the box plot?

set the `type` as factor and arrange the `levels` from basal to apical.

```{r,echo=FALSE}
p <- df%>% 
  mutate(type=factor(type,levels=c("basal","central","apical"))) %>% 
  ggplot(aes(type,flower,fill=student))+
  geom_boxjitter(aes(color=student),alpha=.4,
                 jitter.shape = 21, jitter.color = NA, 
                 jitter.params = list(height = 0, width = 0.04),
                 outlier.color = NA, errorbar.draw = TRUE)+
  theme_classic()+
  theme(strip.background = element_blank(),
        panel.grid.major.x = element_line(),
        legend.position = "bottom") 
suppressWarnings(
  print(p)
)
```

## recommendation

[Datavisualization](https://www.data-to-viz.com) [Scientific story telling](https://academic.oup.com/jxb/article/72/11/3987/6157936)
